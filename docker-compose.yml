version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: tmdb_movie_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: movie_database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d movie_database"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - movie_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tmdb_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tmdb.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - movie_network

  movie-collector:
    build: .
    container_name: tmdb_collector
    restart: "no"
    environment:
      - TMDB_API_KEY=${TMDB_API_KEY}
      - TMDB_BASE_URL=${TMDB_BASE_URL}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=movie_database
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - BATCH_SIZE=${BATCH_SIZE:-20}
      - MAX_PAGES=${MAX_PAGES:-500}
      - LANGUAGE=${LANGUAGE:-en-US}
      - REGION=${REGION:-US}
      - COLLECT_MOVIES=${COLLECT_MOVIES:-true}
      - COLLECT_GENRES=${COLLECT_GENRES:-true}
      - COLLECT_CREDITS=${COLLECT_CREDITS:-true}
      - COLLECT_KEYWORDS=${COLLECT_KEYWORDS:-true}
      - COLLECT_REVIEWS=${COLLECT_REVIEWS:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=logs/movie_collector.log
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - movie_network
    profiles:
      - collector

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  movie_network:
    driver: bridge
